/*=================================================================
 *
 * TEST_COST_FUN
 * CPP Sample driver code for CEC2011_MATLAB that calls a shared library created
 * using MATLAB Compiler SDK.
 * Refer to the MATLAB Compiler SDK documentation for more information.
 *
 *=================================================================*/
// Include the library specific header file as generated by the 
// MATLAB Compiler
#include <iostream>
#include "CEC2011_MATLAB.h"

void cost_fnSample()
{
	mxDouble xInData[] = {1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
	mwArray xIn(126, 1, mxDOUBLE_CLASS);
	xIn.SetData(xInData, 126);

	mwArray fitnessOut;
	mwArray PENALTYOut;
	mwArray rate_dOut;
	try
	{
		cost_fn(3, fitnessOut, PENALTYOut, rate_dOut, xIn);
		std::cout << fitnessOut << std::endl;
		std::cout << PENALTYOut << std::endl;
		std::cout << rate_dOut << std::endl;
	}
	catch (const mwException& e)
	{
		std::cerr << e.what() << std::endl;
	}
	catch (...)
	{
		std::cerr << "Unexpected error thrown" << std::endl;
	}
}

int run_main(int argc, const char **argv)
{
	if (!CEC2011_MATLABInitialize())
	{
		std::cerr << "Could not initialize the library properly" << std::endl;
		return -2;
	}
	else
	{
		cost_fnSample();
		// Call the application and library termination routine
		CEC2011_MATLABTerminate();
	}
	// Note that you should call mclTerminateApplication at the end of
	// your application to shut down all MATLAB Runtime instances.
	mclTerminateApplication();
	return 0;
}

// The main routine. On macOS, the main thread runs the system code, and
// user code must be processed by a secondary thread. On other platforms, 
// the main thread runs both the system code and the user code.
int main(int argc, const char **argv)
{
	/* Call the mclInitializeApplication routine. Make sure that the application
	 * was initialized properly by checking the return status. This initialization
	 * has to be done before calling any MATLAB APIs or MATLAB Compiler SDK
	 * generated shared library functions.
	 */
	if (!mclInitializeApplication(nullptr, 0))
	{
		std::cerr << "Could not initialize the application." << std::endl;
		return -1;
	}
	return mclRunMain(static_cast<mclMainFcnType>(run_main), argc, argv);
}
