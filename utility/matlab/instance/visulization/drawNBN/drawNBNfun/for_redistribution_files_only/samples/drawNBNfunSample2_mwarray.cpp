/*=================================================================
 *
 * DRAWNBNFUNSAMPLE2
 * CPP Sample driver code for drawNBNfun that calls a shared library created
 * using MATLAB Compiler SDK.
 * Refer to the MATLAB Compiler SDK documentation for more information.
 *
 *=================================================================*/
// Include the library specific header file as generated by the 
// MATLAB Compiler
#include <iostream>
#include "drawNBNfun.h"

void drawNBNfunSample()
{
	mxDouble figureIdInData = 1.0;
	mwArray figureIdIn(figureIdInData);
	mxDouble edge_aInData[] = {1.0, 2.0};
	mwArray edge_aIn(1, 2, mxDOUBLE_CLASS);
	edge_aIn.SetData(edge_aInData, 2);

	mxDouble edge_bInData[] = {2.0, 3.0};
	mwArray edge_bIn(1, 2, mxDOUBLE_CLASS);
	edge_bIn.SetData(edge_bInData, 2);

	mxDouble xInData[] = {1.0, 2.0, 3.0};
	mwArray xIn(1, 3, mxDOUBLE_CLASS);
	xIn.SetData(xInData, 3);

	mxDouble yInData[] = {1.0, 2.0, 3.0};
	mwArray yIn(1, 3, mxDOUBLE_CLASS);
	yIn.SetData(yInData, 3);

	mxDouble zInData[] = {1.0, 2.0, 3.0};
	mwArray zIn(1, 3, mxDOUBLE_CLASS);
	zIn.SetData(zInData, 3);

	mxDouble node_fitInData[] = {1.0, 2.0, 3.0};
	mwArray node_fitIn(1, 3, mxDOUBLE_CLASS);
	node_fitIn.SetData(node_fitInData, 3);

	mxDouble numColorInData = 10.0;
	mwArray numColorIn(numColorInData);
	mxDouble basicNodeSizeInData = 20.0;
	mwArray basicNodeSizeIn(basicNodeSizeInData);
	try
	{
		drawNBNfun(figureIdIn, edge_aIn, edge_bIn, xIn, yIn, zIn, node_fitIn, numColorIn, basicNodeSizeIn);
	}
	catch (const mwException& e)
	{
		std::cerr << e.what() << std::endl;
	}
	catch (...)
	{
		std::cerr << "Unexpected error thrown" << std::endl;
	}
}

int run_main(int argc, const char **argv)
{
	if (!drawNBNfunInitialize())
	{
		std::cerr << "Could not initialize the library properly" << std::endl;
		return -2;
	}
	else
	{
		drawNBNfunSample();
		// Call the application and library termination routine
		drawNBNfunTerminate();
	}
	// Note that you should call mclTerminateApplication at the end of
	// your application to shut down all MATLAB Runtime instances.
	mclTerminateApplication();
	return 0;
}

// The main routine. On macOS, the main thread runs the system code, and
// user code must be processed by a secondary thread. On other platforms, 
// the main thread runs both the system code and the user code.
int main(int argc, const char **argv)
{
	/* Call the mclInitializeApplication routine. Make sure that the application
	 * was initialized properly by checking the return status. This initialization
	 * has to be done before calling any MATLAB APIs or MATLAB Compiler SDK
	 * generated shared library functions.
	 */
	if (!mclInitializeApplication(nullptr, 0))
	{
		std::cerr << "Could not initialize the application." << std::endl;
		return -1;
	}
	return mclRunMain(static_cast<mclMainFcnType>(run_main), argc, argv);
}
