/*=================================================================
 *
 * TESTDRAWDF
 * CPP Sample driver code for drawdf that calls a shared library created
 * using MATLAB Compiler SDK.
 * Refer to the MATLAB Compiler SDK documentation for more information.
 *
 *=================================================================*/
// Include the library specific header file as generated by the 
// MATLAB Compiler
#include <iostream>
#include "drawdf.h"

void drawdfSample()
{
	mxDouble figureIdInData = 1.0;
	mwArray figureIdIn(figureIdInData);
	mxDouble df_matInData[] = {0.0, 1.0, -552.467, -552.4, 8.77688E-4, 7.29317E-4, 3.25521E-4, 4.88281E-4};
	mwArray df_matIn(2, 4, mxDOUBLE_CLASS);
	df_matIn.SetData(df_matInData, 8);

	mxDouble numColorInData = 10.0;
	mwArray numColorIn(numColorInData);
	mxDouble basicNodeSizeInData = 20.0;
	mwArray basicNodeSizeIn(basicNodeSizeInData);
	try
	{
		drawdf(figureIdIn, df_matIn, numColorIn, basicNodeSizeIn);
	}
	catch (const mwException& e)
	{
		std::cerr << e.what() << std::endl;
	}
	catch (...)
	{
		std::cerr << "Unexpected error thrown" << std::endl;
	}
}

int run_main(int argc, const char **argv)
{
	if (!drawdfInitialize())
	{
		std::cerr << "Could not initialize the library properly" << std::endl;
		return -2;
	}
	else
	{
		drawdfSample();
		// Call the application and library termination routine
		drawdfTerminate();
	}
	// Note that you should call mclTerminateApplication at the end of
	// your application to shut down all MATLAB Runtime instances.
	mclTerminateApplication();
	return 0;
}

// The main routine. On macOS, the main thread runs the system code, and
// user code must be processed by a secondary thread. On other platforms, 
// the main thread runs both the system code and the user code.
int main(int argc, const char **argv)
{
	/* Call the mclInitializeApplication routine. Make sure that the application
	 * was initialized properly by checking the return status. This initialization
	 * has to be done before calling any MATLAB APIs or MATLAB Compiler SDK
	 * generated shared library functions.
	 */
	if (!mclInitializeApplication(nullptr, 0))
	{
		std::cerr << "Could not initialize the application." << std::endl;
		return -1;
	}
	return mclRunMain(static_cast<mclMainFcnType>(run_main), argc, argv);
}
