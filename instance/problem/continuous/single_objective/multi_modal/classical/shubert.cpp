#include "shubert.h"

namespace ofec {
	void Shubert::addInputParameters() {
		m_input_parameters.add("number of variables", new RangedSizeT(m_number_variables, 2, 3, 2));
		m_input_parameters.add("objective accuracy", new EnumeratedReal(
			m_objective_accuracy, { 1e-1, 1e-2, 1e-3, 1e-4, 1e-5 }, 1e-4));
	}

	void Shubert::initialize_(Environment *env) {
		Continuous::initialize_(env);
		resizeObjective(1);
		m_optimize_mode[0] = OptimizeMode::kMinimize;
		resizeVariable(m_number_variables);
		setDomain(-10, 10);
	}

	void Shubert::updateOptima(Environment *env) {
		m_optima.reset(new Optima<>());
		Solution<> temp_sol(m_number_objectives, m_number_constraints, m_number_variables);
		std::vector<std::vector<Real>> var_data;
		if (m_number_variables == 2)
			var_data = {
			{-0.800321101666771,  4.858056879031077},
			{-0.800321098886851, -1.425128429695222},
			{-0.800321100053478, -7.708313735320266},
			{-1.425128427160455, -7.083506407076557},
			{-1.425128426932510,  5.482864206509566},
			{-1.425128427656631, -0.800321100644668},
			{-7.083506406955212, -1.425128429725184},
			{-7.083506406107422,  4.858056877763675},
			{-7.083506409139547, -7.708313734746701},
			{-7.708313734018089, -0.800321104975058},
			{-7.708313734654018, -7.083506403774196},
			{-7.708313736236348,  5.482864205492431},
			{ 4.858056878566751, -0.800321098657742},
			{ 4.858056877487295,  5.482864205006230},
			{ 4.858056878254283, -7.083506406446656},
			{ 5.482864207734513, -7.708313736611045},
			{ 5.482864208677366,  4.858056878267599},
			{ 5.482864205451765, -1.425128427799135} };
		else
			var_data = {
			{-0.800321101666771, -0.800321101666771, -1.425128427160455 },
			{-0.800321101666771, -0.800321101666771, -7.708313734018089 },
			{-0.800321101666771, -0.800321101666771,  4.858056878566751 },
			{-0.800321101666771, -1.425128427160455, -0.800321101666771 },
			{-0.800321101666771, -1.425128427160455, -7.083506406955212 },
			{-0.800321101180297, -1.425128427170502,  5.482864206557755 },
			{-0.800321101666771, -7.083506406955212, -1.425128427160455 },
			{-0.800321098797740, -7.083506408738313, -7.708313737831096 },
			{-0.800321101672050, -7.083506406940019,  4.858056878549414 },
			{-0.800321099370495, -7.708313735870268, -0.800321098673363 },
			{-0.800321100178944, -7.708313734403374, -7.083506411156131 },
			{-0.800321101218737, -7.708313735559633,  5.482864206215297 },
			{-0.800321101666771,  4.858056878566751, -0.800321101666771 },
			{-0.800321101666771,  4.858056878566751, -7.083506406955212 },
			{-0.800321101666771,  4.858056878566751,  5.482864207734513 },
			{-0.800321101666771,  5.482864207734513, -1.425128427160455 },
			{-0.800321102493463,  5.482864205079627, -7.708313736591135 },
			{-0.800321101666771,  5.482864207734513,  4.858056878566751 },
			{-1.425128427160455, -0.800321101666771, -0.800321101666771 },
			{-1.425128427160455, -0.800321101666771, -7.083506406955212 },
			{-1.425128427170502, -0.800321101180297,  5.482864206557755 },
			{-1.425128427160455, -7.083506406955212, -0.800321101666771 },
			{-1.425128429118548, -7.083506408189992, -7.083506407026485 },
			{-1.425128427160455, -7.083506406955212,  5.482864207734513 },
			{-1.425128429867658,  5.482864207572112, -0.800321099369212 },
			{-1.425128427724944,  5.482864207352263, -7.083506407250875 },
			{-1.425128427160455,  5.482864207734513,  5.482864207734513 },
			{-7.083506406955212, -0.800321101666771, -1.425128427160455 },
			{-7.083506408738313, -0.800321098797740, -7.708313737831096 },
			{-7.083506406940019, -0.800321101672050,  4.858056878549414 },
			{-7.083506406955212, -1.425128427160455, -0.800321101666771 },
			{-7.083506408189992, -1.425128429118548, -7.083506407026485 },
			{-7.083506406955212, -1.425128427160455,  5.482864207734513 },
			{-7.083506406700687, -7.083506407869354, -1.425128430181795 },
			{-7.083506406975824, -7.083506407068400, -7.708313733941123 },
			{-7.083506409168949, -7.083506409654505,  4.858056880585879 },
			{-7.083506406955212, -7.708313734018089, -0.800321101666771 },
			{-7.083506406955212, -7.708313734018089, -7.083506406955212 },
			{-7.083506406955212, -7.708313734018089,  5.482864207734513 },
			{-7.083506406955212,  4.858056878566751, -0.800321101666771 },
			{-7.083506406940874,  4.858056878567888, -7.083506406995292 },
			{-7.083506406955212,  4.858056878566751,  5.482864207734513 },
			{-7.083506406955212,  5.482864207734513, -1.425128427160455 },
			{-7.083506406955212,  5.482864207734513, -7.708313734018089 },
			{-7.083506406955211,  5.482864207734513,  4.858056878566751 },
			{-7.708313735870268, -0.800321099370495, -0.800321098673363 },
			{-7.708313734403374, -0.800321100178944, -7.083506411156131 },
			{-7.708313735559633, -0.800321101218737,  5.482864206215297 },
			{-7.708313737783120, -7.083506410275541, -0.800321101277329 },
			{-7.708313736088170, -7.083506412116764,  5.482864206039194 },
			{-7.708313736869249, -7.083506411490457, -7.083506409852086 },
			{-7.708313734787152,  5.482864206160391, -0.800321100625162 },
			{-7.708313736088170,  5.482864206039194, -7.083506412116764 },
			{-7.708313735318738,  5.482864206680189,  5.482864205620734 },
			{ 4.858056878566751, -0.800321101666771, -0.800321101666771 },
			{ 4.858056878566751, -0.800321101666771, -7.083506406955212 },
			{ 4.858056878566751, -0.800321101666771,  5.482864207734513 },
			{ 4.858056878566751, -7.083506406955212, -0.800321101666771 },
			{ 4.858056878567888, -7.083506406940874, -7.083506406995292 },
			{ 4.858056878566751, -7.083506406955212,  5.482864207734513 },
			{ 4.858056878566751,  5.482864207734513, -0.800321101666771 },
			{ 4.858056878566751,  5.482864207734513, -7.083506406955212 },
			{ 4.858056878566751,  5.482864207734513,  5.482864207734513 },
			{ 5.482864207734513, -0.800321101666771, -1.425128427160455 },
			{ 5.482864207734513, -0.800321101666771, -7.708313734018089 },
			{ 5.482864207734513, -0.800321101666771,  4.858056878566751 },
			{ 5.482864207734513, -1.425128427160455, -0.800321101666771 },
			{ 5.482864207352263, -1.425128427724944, -7.083506407250875 },
			{ 5.482864207734513, -1.425128427160455,  5.482864207734513 },
			{ 5.482864207734513, -7.708313734018089, -0.800321101666771 },
			{ 5.482864207734513, -7.708313734018089, -7.083506406955212 },
			{ 5.482864207734513, -7.708313734018089,  5.482864207734513 },
			{ 5.482864207734513, -7.083506406955212, -1.425128427160455 },
			{ 5.482864207734513, -7.083506406955212, -7.708313734018089 },
			{ 5.482864207734513, -7.083506406955211,  4.858056878566751 },
			{ 5.482864207734513,  4.858056878566751, -0.800321101666771 },
			{ 5.482864207734513,  4.858056878566751, -7.083506406955212 },
			{ 5.482864207734513,  4.858056878566751,  5.482864207734513 },
			{ 5.482864207734513,  5.482864207734513, -1.425128427160455 },
			{ 5.482864207734513,  5.482864207734513, -7.708313734018089 },
			{ 5.482864207734513,  5.482864207734513,  4.858056878566751 } };
		for (auto &var_datum : var_data) {
			temp_sol.variable().vector() = var_datum;
			evaluate(temp_sol.variableBase(), temp_sol.objective(), temp_sol.constraint());
			dynamic_cast<Optima<>&>(*m_optima).appendSolution(temp_sol);
		}
		m_variable_niche_radius = 0.5;
	}

	void Shubert::evaluateObjective(Real *x, std::vector<Real> &obj) const {
		Real s = 1;
		for (int j = 0; j < m_number_variables; ++j) {
			Real a = 0;
			for (int i = 1; i <= 5; i++) {
				a += i * cos((i + 1) * x[j] + i);
			}
			s *= a;
		}
		obj[0] = s;
	}

}